// Code generated by tygo. DO NOT EDIT.

//////////
// source: db_gen.go

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const RFC3339Milli: any = null; /* types.RFC3339Milli */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type BatchResult = any /* types.BatchResult */;
export type DateTime = Date /* types.DateTime */;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type JSON = any /* types.JSON */;
export type Bytes = number /* types.Bytes */;
export type BigInt = number /* types.BigInt */;
export type Decimal = number /* types.Decimal */;
export type RawString = string /* rawmodels.String */;
export type RawInt = number /* rawmodels.Int */;
export type RawFloat = number /* rawmodels.Float */;
export type RawBoolean = boolean /* rawmodels.Boolean */;
export type RawDateTime = Date /* rawmodels.DateTime */;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type RawJSON = any /* rawmodels.JSON */;
export type RawBytes = Bytes /* rawmodels.Bytes */;
export type RawBigInt = number /* rawmodels.BigInt */;
export type RawDecimal = number /* rawmodels.Decimal */;
/**
 * UserModel represents the User model and is a wrapper for accessing fields and methods
 */
export interface UserModel {
	InnerUser: InnerUser;
	RelationsUser: RelationsUser;
}
/**
 * InnerUser holds the actual data
 */
export interface InnerUser {
	createdAt: DateTime;
	updatedAt: DateTime;
	handle: string;
	displayName: string;
	password: string;
}
/**
 * RawUserModel is a struct for User when used in raw queries
 */
export interface RawUserModel {
	createdAt: RawDateTime;
	updatedAt: RawDateTime;
	handle: RawString;
	displayName: RawString;
	password: RawString;
}
/**
 * RelationsUser holds the relation data separately
 */
export interface RelationsUser {
	comments?: CommentModel[];
	tweets?: TweetsModel[];
	following?: FollowRelationModel[];
	followers?: FollowRelationModel[];
}
/**
 * FollowRelationModel represents the FollowRelation model and is a wrapper for accessing fields and methods
 */
export interface FollowRelationModel {
	InnerFollowRelation: InnerFollowRelation;
	RelationsFollowRelation: RelationsFollowRelation;
}
/**
 * InnerFollowRelation holds the actual data
 */
export interface InnerFollowRelation {
	id: string;
	createdAt: DateTime;
	updatedAt: DateTime;
	followerHandle: string;
	followingHandle: string;
}
/**
 * RawFollowRelationModel is a struct for FollowRelation when used in raw queries
 */
export interface RawFollowRelationModel {
	id: RawString;
	createdAt: RawDateTime;
	updatedAt: RawDateTime;
	followerHandle: RawString;
	followingHandle: RawString;
}
/**
 * RelationsFollowRelation holds the relation data separately
 */
export interface RelationsFollowRelation {
	follower?: UserModel;
	following?: UserModel;
}
/**
 * CommentModel represents the Comment model and is a wrapper for accessing fields and methods
 */
export interface CommentModel {
	InnerComment: InnerComment;
	RelationsComment: RelationsComment;
}
/**
 * InnerComment holds the actual data
 */
export interface InnerComment {
	id: string;
	createdAt: DateTime;
	updatedAt: DateTime;
	content: string;
	authorHandle: string;
	tweetId: string;
}
/**
 * RawCommentModel is a struct for Comment when used in raw queries
 */
export interface RawCommentModel {
	id: RawString;
	createdAt: RawDateTime;
	updatedAt: RawDateTime;
	content: RawString;
	authorHandle: RawString;
	tweetId: RawString;
}
/**
 * RelationsComment holds the relation data separately
 */
export interface RelationsComment {
	author?: UserModel;
	tweet?: TweetsModel;
}
/**
 * TweetsModel represents the Tweets model and is a wrapper for accessing fields and methods
 */
export interface TweetsModel {
	InnerTweets: InnerTweets;
	RelationsTweets: RelationsTweets;
}
/**
 * InnerTweets holds the actual data
 */
export interface InnerTweets {
	id: string;
	content: string;
	authorHandle: string;
}
/**
 * RawTweetsModel is a struct for Tweets when used in raw queries
 */
export interface RawTweetsModel {
	id: RawString;
	content: RawString;
	authorHandle: RawString;
}
/**
 * RelationsTweets holds the relation data separately
 */
export interface RelationsTweets {
	author?: UserModel;
	comments?: CommentModel[];
}

// source: types.go

export interface CreateTweetParams {
	content: string;
}
export interface FindOneTweetParams {
	id: string;
}
export interface UpdateTweetParams {
	id: string;
	content: string;
}
export interface Tweet extends TweetsModel {}
